---

name: CI/CD
on:
    push:
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true
env:
    AUDIOWAVEFORM_VERSION: 1.10.1
jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        strategy:
          matrix:
            image: 
                - amazonlinux:2023
                - amazon/aws-lambda-nodejs:20
        container:
            image: ${{ matrix.image }}
        steps:
            - name: Generate image name
              id: gen_image_name
              env:
                IMAGE: ${{ matrix.image }}
              run: echo "IMAGE_NAME=${IMAGE//[\/:]/-}" >> $GITHUB_OUTPUT
            - name: Install dependencies
              run: |
                dnf update -y && \
                dnf install -y libicu-devel make cmake3 automake libtool gcc gcc-c++ wget tar \
                    gzip zip libcurl-devel zlib-static libpng-static xz git python python-devel \
                    bzip2-devel which gd-devel
            - name: Install libid3tag
              run: |
                wget http://sourceforge.net/projects/mad/files/libid3tag/0.15.1b/libid3tag-0.15.1b.tar.gz && \
                tar xzf libid3tag-0.15.1b.tar.gz && \
                cd libid3tag-0.15.1b && \
                ./configure --enable-static --libdir=/lib64 --build=aarch64-unknown-linux-gnu && \
                make && \
                make install
            - name: Install libmad
              run: |
                wget https://netix.dl.sourceforge.net/project/mad/libmad/0.15.1b/libmad-0.15.1b.tar.gz && \
                tar xzf libmad-0.15.1b.tar.gz && \
                cd libmad-0.15.1b && \
                sed -i 's/ -fforce-mem//' configure && \
                ./configure --disable-shared --libdir=/lib64 --build=aarch64-unknown-linux-gnu && \
                make install
            - name: Install flac
              run: |
                wget https://ftp.osuosl.org/pub/xiph/releases/flac/flac-1.3.0.tar.xz && \
                tar xf flac-1.3.0.tar.xz && \
                cd flac-1.3.0 && \
                ./configure --disable-shared --libdir=/lib64 --build=aarch64-unknown-linux-gnu && \
                make install
            - name: Install libogg
              run: |
                wget http://downloads.xiph.org/releases/ogg/libogg-1.3.4.tar.gz && \
                tar xf libogg-1.3.4.tar.gz && \
                cd libogg-1.3.4 && \
                ./configure --disable-shared --libdir=/lib64 --build=aarch64-unknown-linux-gnu && \
                make install
            - name: Install libvorbis
              run: |
                wget http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.6.tar.gz && \
                tar xf libvorbis-1.3.6.tar.gz && \
                cd libvorbis-1.3.6 && \
                ./configure --disable-shared --libdir=/lib64 --build=aarch64-unknown-linux-gnu && \
                make install
            - name: Install opus
              run: |
                wget https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz && \
                tar xzf opus-1.3.1.tar.gz && \
                cd opus-1.3.1 && \
                ./configure --disable-shared --libdir=/lib64 --build=aarch64-unknown-linux-gnu && \
                make install
            - name: Install libgd
              run: |
                git clone https://github.com/libgd/libgd.git && \
                cd libgd && \
                mkdir build && \
                cd $_ && \
                cmake3 -DBUILD_STATIC_LIBS=1 -DENABLE_PNG=1 .. && \
                make && \
                mv Bin/libgd.a /lib64
            - name: Install libsndfile
              run: |
                wget https://github.com/libsndfile/libsndfile/archive/refs/tags/1.1.0.tar.gz && \
                tar xzf 1.1.0.tar.gz && \
                cd libsndfile-1.1.0 && \
                mkdir build && \
                cd build && \
                cmake -D ENABLE_MPEG=0 -D ENABLE_TESTING=0 -D BUILD_SHARED_LIBS=0 -D BUILD_REGTEST=0 -D BUILD_PROGRAMS=0 -D BUILD_TESTING=0 -D BUILD_EXAMPLES=0 .. && \
                make && \
                make install
            - name: Install boost
              run: |
                wget https://boostorg.jfrog.io/artifactory/main/release/1.85.0/source/boost_1_85_0.tar.gz && \
                tar xf boost_1_85_0.tar.gz && \
                cd boost_1_85_0 && \
                ./bootstrap.sh --without-icu --libdir=/lib64 --includedir=/usr/include && \
                ./b2 --disable-icu --with-program_options --with-filesystem --with-system --with-regex link=static install
            - name: Install audiowaveform
              run: |
                wget https://github.com/bbc/audiowaveform/archive/${{ env.AUDIOWAVEFORM_VERSION }}.tar.gz && \
                tar xzf ${{ env.AUDIOWAVEFORM_VERSION }}.tar.gz && \
                cd ./audiowaveform-${{ env.AUDIOWAVEFORM_VERSION }} && \
                mkdir ./build && \
                cd ./build && \
                cmake3 -D ENABLE_TESTS=0 -D CMAKE_BUILD_TYPE=Release -D BUILD_STATIC=1 .. && \
                cmake --build . --config Release
            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                name: ${{ env.AUDIOWAVEFORM_VERSION }}-${{ steps.gen_image_name.outputs.IMAGE_NAME }}
                path: ./audiowaveform-${{ env.AUDIOWAVEFORM_VERSION }}/build/audiowaveform
                if-no-files-found: error
                retention-days: 1
    test:
        name: Test
        needs: build
        runs-on: ubuntu-latest
        strategy:
            matrix:
                image: 
                    - amazonlinux:2023
                    - amazon/aws-lambda-nodejs:20
        container:
            image: ${{ matrix.image }}
        steps:
            - name: Generate image name
              id: gen_image_name
              env:
                IMAGE: ${{ matrix.image }}
              run: echo "IMAGE_NAME=${IMAGE//[\/:]/-}" >> $GITHUB_OUTPUT
            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                name: ${{ env.AUDIOWAVEFORM_VERSION }}-${{ steps.gen_image_name.outputs.IMAGE_NAME }}
            - name: Update permissions
              run: chmod +x ./audiowaveform
            - run: ls -la
            - name: Test audiowaveform
              run: ./audiowaveform --help
    release:
        name: Release
        needs: test
        runs-on: ubuntu-latest
        steps:
            - name: Download artifacts
              uses: actions/download-artifact@v4
            - run: ls -la
            - uses: ncipollo/release-action@v1
              with:
                allowUpdates: true
                artifacts: "${{ env.AUDIOWAVEFORM_VERSION }}-*"
                name: ${{ env.AUDIOWAVEFORM_VERSION }}
                replacesArtifacts: true
